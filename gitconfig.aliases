#
# Can be added to ~/.gitconfig by doing
#
# [include]
#    path = /path/to/gitconfig.aliases
#
# Alternatively,
# 
#   git config --global include.path /path/to/gitconfig.aliases
#

[alias]
    # Abort rebase
    abort = rebase --abort
    # List all the aliases
    aliases = "!git config -l | grep alias | cut -c 7-"
    # Add all tracked files and amend commit
    amend = commit -a --amend
    # Lists all branches including remote branches
    branches = branch -a
    # Update local branch, if unstaged changes present, stash pull (with rebase) and unstash
    branchUpdate = ![[ -z $(git status --porcelain -uno) ]] && git pull --rebase || git stash && git pull --rebase && git stash pop
    # Discard changes to a file
    discard = checkout --
    # Show information on the remote, if no argument passed use origin
    info  = "!sh -c '[ $# -ne 0 ] && git remote show $1 && exit 0 || [ $# -eq 0 ] && git remote show origin && exit 0' -"
    # List all files, find the one that matches input
    find = "!git ls-files | grep -i"
    # Print log in one line graph format
    logOneLine = log --graph --decorate --pretty=oneline --abbrev-commit
    # Print log in one line graph format with all option
    logOneLineAll = log --graph --decorate --pretty=oneline --abbrev-commit --all
    # Print log in custom format (close to oneline) along with author and date
    logPretty = log --graph --pretty=format:'%Cred%h%Creset -%C(yellow)%d%Creset %s %Cgreen(%cr) %C(bold blue)<%an>%Creset' --abbrev-commit --date=relative
    # Parse authors in entire log, count for unique and print in desc order of contributions
    peeps = !git log --pretty=format:%aN | sort | uniq -c | sort -rn
    # Parse authors files, and check for lines of code per author, desc order
    peepsLoC = !git ls-files | xargs -n1 git blame --line-porcelain | sed -n 's/^author //p' | sort -f | uniq -ic | sort -nr
    # Cleaner reflog
    reflogAbbrev = reflog --abbrev --decorate
    # Show references in abbreviated format
    showRef = show-ref --abbrev
    # List all the stashes
    stashes = stash list
    # Reset HEAD and un-stage all staged files
    unStageAll = reset -q HEAD
    # Unstage a file
    unStage = reset -q HEAD --

    #TODO
    # diffWithBranch = "!f() { currentBranch=$(git for-each-ref --format='%(upstream:short)' $(git symbolic-ref -q HEAD)); git diff HEAD "${1:-$currentBranch}"}; f"
    # TODO 2
    # rewriteHistory = "filter-branch --tree-filter "sed  -i -e 's/oldWord/newWord/g' fileName" HEAD
