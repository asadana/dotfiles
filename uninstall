#!/usr/bin/env python3

import os
import shutil
import sys


HOME_DIR = os.environ["HOME"]
ZSH_DIR = os.path.join(HOME_DIR, ".oh-my-zsh")

COLOR_BLUE = "\033[94m"
COLOR_RED = "\033[31m"
COLOR_GREEN = "\033[32m"
COLOR_YELLOW = "\033[93m"
COLOR_NONE = "\033[00m"
ICON_CHECK_MARK = "\U00002705"

SYMLINKS_TO_UNLINK = [
    os.path.join(HOME_DIR, ".bashrc"),
    os.path.join(HOME_DIR, ".vimrc"),
    os.path.join(HOME_DIR, ".p10k.zsh"),
    os.path.join(HOME_DIR, ".zshenv"),
    os.path.join(HOME_DIR, ".zshrc"),
    os.path.join(HOME_DIR, "bin")
]

FILES_TO_DELETE = [
    os.path.join(HOME_DIR, ".gitconfig")
]

DIRECTORIES_TO_DELETE = [
    os.path.join(HOME_DIR, ".oh-my-zsh")
]


def __print_colored(message: str, color: str):
    """
    Function that simply prints the message but in a specific color provided by the param.
    :param message: the message to be printed
    :param color: the color to use for the message
    """
    print(f"{color}{message}{COLOR_NONE}")


def _print_info(message):
    """
    Function that prints a message with INFO colors (NONE).
    :param message: the message to be printed
    """
    __print_colored(message, COLOR_NONE)


def _print_title(message):
    """
    Function that prints a message with TITLE colors (BLUE).
    :param message: the message to be printed
    """
    __print_colored(message, COLOR_BLUE)


def _print_done(message):
    """
    Function that prints a message with DONE colors (GREEN).
    :param message: the message to be printed
    """
    __print_colored(message, COLOR_GREEN)


def _print_warning(message):
    """
    Function that prints a message with WARNING colors (YELLOW).
    :param message: the message to be printed
    """
    __print_colored(message, COLOR_YELLOW)


def _print_error(message):
    """
    Function that prints a message with ERROR colors (RED).
    :param message: the message to be printed
    """
    __print_colored(message, COLOR_RED)


def __remove_symlink(link: str):
    """
    Function that removes the symlink
    :param link: Link path to unlink.
    """
    if os.path.islink(link):
        try:
            os.unlink(link)
            _print_done(f"Symlink {link} unlinked.")
        except OSError as err:
            _print_error(f"Failed to unlink {link}. Reason: {err}")
    else:
        _print_warning(f"{link} is not a symlink.")


def cleanup_symlinks():
    """
    Function that cleans up the symlinks.
    """
    for link in SYMLINKS_TO_UNLINK:
        __remove_symlink(link)


def cleanup_files_and_dir():
    """
    Function that cleans up files and directories
    """
    for f in FILES_TO_DELETE:
        if os.path.isfile(f):
            os.remove(f)
            _print_done(f"File {f} removed.")
        else:
            _print_warning(f"File {f} does not exist.")

    for d in DIRECTORIES_TO_DELETE:
        if os.path.isdir(d):
            shutil.rmtree(d)
            _print_done(f"Directory {d} removed.")
        else:
            _print_warning(f"Directory {d} does not exist.")


def main():
    """
    Function that does all the orchestration between functions.
    TODO: Configure this into a menu, with auto option to go through expected flow.
    """
    _print_title("\nCLeaning up symlinks")
    cleanup_symlinks()

    _print_title("\nCLeaning up files and directories")
    cleanup_files_and_dir()

    _print_info(f"\nAll done! {ICON_CHECK_MARK}")


if __name__ == "__main__":
    main()
